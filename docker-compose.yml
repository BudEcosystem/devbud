version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-devbud_db}
      POSTGRES_USER: ${POSTGRES_USER:-devbud}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-devbud_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-devbud}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-devbud}:${POSTGRES_PASSWORD:-devbud_password}@db:5432/${POSTGRES_DB:-devbud_db}
      REDIS_URL: redis://redis:6379
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here-change-in-production}
      CLAUDE_MODEL: ${CLAUDE_MODEL:-opus-4}
      WORKTREE_BASE_PATH: /app/data/worktrees
    volumes:
      - ./backend:/app
      - worktree_data:/app/data/worktrees
      # Git config will be set by startup command
      - ~/.ssh:/root/.ssh:ro              # Share SSH keys for git
      - /home/budadmin:/home/budadmin  # Mount repositories directory
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        git config --global --add safe.directory '*' &&
        alembic upgrade head &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_WS_URL: ws://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    command: npm run dev

  # Celery Worker - Commented out for local execution
  # Run the worker locally instead to access Claude Code CLI with browser auth
  # See backend/.env.local for local configuration
  # celery:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   environment:
  #     DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-devbud}:${POSTGRES_PASSWORD:-devbud_password}@db:5432/${POSTGRES_DB:-devbud_db}
  #     REDIS_URL: redis://redis:6379
  #     CLAUDE_MODEL: ${CLAUDE_MODEL:-opus-4}
  #     WORKTREE_BASE_PATH: /app/data/worktrees
  #   volumes:
  #     - ./backend:/app
  #     - worktree_data:/app/data/worktrees
  #     # Git config will be set by startup command
  #     - ~/.ssh:/root/.ssh:ro
  #     - /home/budadmin:/home/budadmin  # Mount repositories directory
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   command: >
  #     sh -c "
  #       git config --global --add safe.directory '*' &&
  #       celery -A app.services.task_queue worker --loglevel=info
  #     "

  # Celery Beat (for scheduled tasks if needed)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-devbud}:${POSTGRES_PASSWORD:-devbud_password}@db:5432/${POSTGRES_DB:-devbud_db}
      REDIS_URL: redis://redis:6379
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.services.task_queue beat --loglevel=info

  # Flower (Celery monitoring)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5555:5555"
    environment:
      CELERY_BROKER_URL: redis://redis:6379
    depends_on:
      - redis
    command: celery -A app.services.task_queue flower --port=5555

volumes:
  postgres_data:
  redis_data:
  worktree_data: